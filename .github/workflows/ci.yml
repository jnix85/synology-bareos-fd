# GitHub Actions workflow for Bareos File Daemon SPK package
# Runs automated tests and builds the SPK package

name: Bareos FD SPK CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PACKAGE_NAME: bareos-fd
  ARTIFACT_RETENTION_DAYS: 30

jobs:
  # Validate package structure and syntax
  validate:
    name: Validate Package Structure
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq bc tree
        
    - name: Set executable permissions
      run: |
        find . -name "*.sh" -exec chmod +x {} \;
        
    - name: Run validation tests
      run: |
        cd tests
        ./run_tests.sh quality
        
    - name: Run unit tests
      run: |
        cd tests
        ./run_tests.sh unit
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: validation-test-results
        path: tests/reports/
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # Build and test SPK package
  build:
    name: Build SPK Package
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq bc tree openssl
        
    - name: Set executable permissions
      run: |
        find . -name "*.sh" -exec chmod +x {} \;
        
    - name: Build SPK package
      run: |
        ./build_spk.sh
        
    - name: Verify SPK package
      run: |
        if [ -f *.spk ]; then
          echo "SPK package built successfully:"
          ls -la *.spk
          echo "Package contents:"
          tar -tvf *.spk
        else
          echo "ERROR: No SPK package found"
          exit 1
        fi
        
    - name: Run integration tests
      run: |
        cd tests
        ./run_tests.sh integration
        
    - name: Upload SPK package
      uses: actions/upload-artifact@v4
      with:
        name: spk-package
        path: "*.spk"
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-test-results
        path: tests/reports/
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # Full test suite with reporting
  test:
    name: Full Test Suite
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq bc tree openssl shellcheck
        
    - name: Set executable permissions
      run: |
        find . -name "*.sh" -exec chmod +x {} \;
        
    - name: Run ShellCheck
      run: |
        echo "Running ShellCheck on all shell scripts..."
        find . -name "*.sh" -not -path "./tests/*" | xargs shellcheck -e SC1091 || true
        
    - name: Run complete test suite
      run: |
        cd tests
        ./run_tests.sh all
        
    - name: Generate test badge
      if: always()
      run: |
        if [ -f tests/reports/test_summary_*.txt ]; then
          LATEST_SUMMARY=$(ls -t tests/reports/test_summary_*.txt | head -1)
          PASSED=$(grep "Passed:" "$LATEST_SUMMARY" | cut -d: -f2 | tr -d ' ')
          TOTAL=$(grep "Total Tests:" "$LATEST_SUMMARY" | cut -d: -f2 | tr -d ' ')
          SUCCESS_RATE=$(echo "scale=0; $PASSED * 100 / $TOTAL" | bc -l 2>/dev/null || echo "0")
          
          if [ "$SUCCESS_RATE" = "100" ]; then
            COLOR="brightgreen"
          elif [ "$SUCCESS_RATE" -ge "80" ]; then
            COLOR="yellow"
          else
            COLOR="red"
          fi
          
          echo "TEST_BADGE_URL=https://img.shields.io/badge/tests-$PASSED%2F$TOTAL%20passed-$COLOR" >> $GITHUB_ENV
        fi
        
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: tests/reports/
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security checks
      run: |
        echo "Scanning for security issues..."
        
        # Check for hardcoded secrets
        echo "Checking for potential secrets..."
        if grep -r "password\s*=\s*['\"][^'\"]*['\"]" . --exclude-dir=.git --exclude-dir=tests; then
          echo "WARNING: Found potential hardcoded passwords"
        fi
        
        # Check for proper permission settings
        echo "Checking permission settings in scripts..."
        if grep -r "chmod 777\|chmod.*666" . --exclude-dir=.git; then
          echo "ERROR: Found overly permissive file permissions"
          exit 1
        fi
        
        # Check for proper user handling
        echo "Checking user creation and privilege handling..."
        if ! grep -q "bareos" scripts/postinst; then
          echo "ERROR: User creation not found in postinst"
          exit 1
        fi
        
        echo "Security checks completed"

  # Package deployment (only on release)
  deploy:
    name: Deploy Package
    runs-on: ubuntu-latest
    needs: [build, test, security]
    if: github.event_name == 'release'
    
    steps:
    - name: Download SPK package
      uses: actions/download-artifact@v4
      with:
        name: spk-package
        
    - name: Download test reports
      uses: actions/download-artifact@v4
      with:
        name: test-reports
        path: test-reports/
        
    - name: Create release asset list
      run: |
        echo "Preparing release assets..."
        ls -la
        
        # Create checksums
        for file in *.spk; do
          sha256sum "$file" > "$file.sha256"
        done
        
        # Create release notes from test report
        if [ -f test-reports/test_summary_*.txt ]; then
          LATEST_SUMMARY=$(ls -t test-reports/test_summary_*.txt | head -1)
          echo "## Test Results" > release_notes.md
          echo '```' >> release_notes.md
          cat "$LATEST_SUMMARY" >> release_notes.md
          echo '```' >> release_notes.md
        fi
        
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          *.spk
          *.sha256
        body_path: release_notes.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notification on completion
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [validate, build, test, security]
    if: always()
    
    steps:
    - name: Determine overall result
      run: |
        if [ "${{ needs.validate.result }}" = "success" ] && \
           [ "${{ needs.build.result }}" = "success" ] && \
           [ "${{ needs.test.result }}" = "success" ] && \
           [ "${{ needs.security.result }}" = "success" ]; then
          echo "OVERALL_RESULT=success" >> $GITHUB_ENV
          echo "STATUS_EMOJI=✅" >> $GITHUB_ENV
          echo "STATUS_MESSAGE=All checks passed! SPK package is ready." >> $GITHUB_ENV
        else
          echo "OVERALL_RESULT=failure" >> $GITHUB_ENV
          echo "STATUS_EMOJI=❌" >> $GITHUB_ENV
          echo "STATUS_MESSAGE=Some checks failed. Please review the results." >> $GITHUB_ENV
        fi
        
    - name: Create summary
      run: |
        echo "## ${{ env.STATUS_EMOJI }} Bareos FD SPK Build Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Validation | ${{ needs.validate.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ needs.build.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security | ${{ needs.security.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Overall Result:** ${{ env.STATUS_MESSAGE }}" >> $GITHUB_STEP_SUMMARY